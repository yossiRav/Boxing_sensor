/*
 * חיישן אגרוף בלוטות' - מתוקן למניעת מכות כוזבות (קוד מלא)
 * ESP32 + 2x MPU6050 + Bluetooth Classic
 * 
 * פתרון לבעיית מכות כוזבות כשהחיישן במצב יציב חדש
 * 
 * מיקום חיישנים על השק:
 * חיישן 1: עליון (ראש/גוף) - SDA=21, SCL=22, כתובת=0x68
 * חיישן 2: תחתון (כבד) - SDA=25, SCL=26, כתובת=0x68
 * 
 * קובץ: boxing_sensor_fixed_complete.ino
 * תאריך: יולי 2025
 * קוד מלא עם מניעת מכות כוזבות
 */

#include <Wire.h>
#include "BluetoothSerial.h"
#include <ArduinoJson.h>

// בלוטות'
BluetoothSerial SerialBT;
String device_name = "BoxingSensor_01";

// פיני I2C לשני חיישנים
#define SDA1 21  // חיישן עליון
#define SCL1 22
#define SDA2 25  // חיישן תחתון
#define SCL2 26

// כתובות חיישנים - שניהם באותה כתובת (0x68)
#define MPU6050_ADDR1 0x68  // חיישן עליון (AD0=GND)
#define MPU6050_ADDR2 0x68  // חיישן תחתון (AD0=GND) - אותה כתובת!

// שני I2C buses
TwoWire I2C_1 = TwoWire(0);
TwoWire I2C_2 = TwoWire(1);

// מבנה נתונים לכל חיישן
struct SensorData {
    float current_punch;
    float max_punch;
    int punch_count;
    float baseline_x, baseline_y, baseline_z;
    bool punch_detected;
    unsigned long last_detection;
    unsigned long last_punch_time;
    
    // קליברציה דינמית מתקדמת - מניעת מכות כוזבות
    float moving_avg_x, moving_avg_y, moving_avg_z;
    int stable_count;
    unsigned long last_recalibration;
    
    // זיהוי יציבות מתקדם
    float stability_buffer[10];  // מאגר של 10 קריאות אחרונות
    int stability_index;
    bool is_stable;
    float current_stability_baseline_x, current_stability_baseline_y, current_stability_baseline_z;
    unsigned long stability_start_time;
    
    // זיהוי תנועה אמיתית (מכה)
    float acceleration_peak;
    bool in_motion;
    unsigned long motion_start_time;
    
    // מניעת מכות כוזבות
    float variance_threshold;
    bool recently_moved;
    unsigned long last_significant_motion;
};

SensorData sensor1; // עליון (ראש/גוף)
SensorData sensor2; // תחתון (כבד)

// משתנים גלובליים
unsigned long training_start_time = 0;
int total_punches = 0;
String session_id = "";

// הגדרות מעקב אגרופים - מתקדמות למניעת מכות כוזבות
float PUNCH_THRESHOLD = 0.8;
const unsigned long COOLDOWN_BETWEEN_PUNCHES = 120;  // 120ms = 8.3 מכות/שנייה
const unsigned long SENSOR_RESET_TIME = 50;         // 50ms = זמן מינימלי לזיהוי מכה חדשה

// הגדרות יציבות חדשות - מתקדמות
const int STABILITY_REQUIRED_SAMPLES = 8;           // 8 דגימות יציבות = 80ms
const float STABILITY_VARIANCE_THRESHOLD = 0.02;    // רף שונות נמוך ליציבות
const unsigned long MIN_STABILITY_TIME = 200;       // 200ms מינימום יציבות
const unsigned long SIGNIFICANT_MOTION_COOLDOWN = 300; // 300ms לאחר תנועה משמעותית

// למידה אוטומטית
const int LEARNING_SAMPLE_SIZE = 10;
float learning_forces[LEARNING_SAMPLE_SIZE];
int learning_index = 0;
bool learning_complete = false;

// משתנים לשליחת נתונים
unsigned long last_data_send = 0;
const unsigned long DATA_SEND_INTERVAL = 100; // שליחה כל 100ms
unsigned long last_status_send = 0;
const unsigned long STATUS_SEND_INTERVAL = 1000; // סטטוס כל שנייה

// הכרזות פונקציות
void resetSensorData(SensorData* sensor);
void initMPU6050(TwoWire* wire, const char* name, byte addr);
void readSensor(TwoWire* wire, SensorData* sensor, byte addr);
void updateStabilityTracking(SensorData* sensor, float ax, float ay, float az);
bool isCurrentlyStable(SensorData* sensor);
float calculateVariance(float* buffer, int size, float mean);
void updateMovingBaseline(SensorData* sensor, float ax, float ay, float az);
void detectPunch(SensorData* sensor);
void detectSmartPunch();
float calculateCombinedForce(int primary_sensor);
void adaptToUser(float force);
void calibrateSensor(TwoWire* wire, SensorData* sensor, const char* name, byte addr);
void sendDataToBluetooth();
void sendStatusToBluetooth();
void sendPunchEventToBluetooth(int sensor_num, String zone, float force, float combined_force, float bpm);
void handleBluetoothCommands();
void resetTraining();
void calibrateAllSensors();
void printStatus();
float roundFloat(float value, int decimals);

void setup() {
    Serial.begin(115200);
    delay(1000);
    
    Serial.println("=== חיישן אגרוף מתקדם - ללא מכות כוזבות ===");
    Serial.println("מאתחל מערכת...");
    
    // איפוס משתנים
    resetSensorData(&sensor1);
    resetSensorData(&sensor2);
    total_punches = 0;
    training_start_time = millis();
    session_id = "session_" + String(millis());
    
    // אתחול I2C
    Serial.println("🔧 מאתחל I2C buses...");
    I2C_1.begin(SDA1, SCL1, 100000);
    I2C_2.begin(SDA2, SCL2, 100000);
    
    Serial.printf("I2C_1: SDA=%d, SCL=%d (כתובת 0x%02X)\n", SDA1, SCL1, MPU6050_ADDR1);
    Serial.printf("I2C_2: SDA=%d, SCL=%d (כתובת 0x%02X)\n", SDA2, SCL2, MPU6050_ADDR2);
    
    delay(100);
    
    // אתחול חיישנים
    Serial.println("\n📡 מאתחל חיישנים...");
    initMPU6050(&I2C_1, "עליון (ראש/גוף)", MPU6050_ADDR1);
    initMPU6050(&I2C_2, "תחתון (כבד)", MPU6050_ADDR2);
    
    delay(500);
    
    // קליברציה ראשונית
    Serial.println("\n⚖️ מכייל חיישנים...");
    calibrateSensor(&I2C_1, &sensor1, "עליון", MPU6050_ADDR1);
    calibrateSensor(&I2C_2, &sensor2, "תחתון", MPU6050_ADDR2);
    
    // אתחול בלוטות'
    Serial.println("\n🔵 מפעיל בלוטות'...");
    if (!SerialBT.begin(device_name)) {
        Serial.println("❌ שגיאה באתחול בלוטות'!");
        return;
    }
    
    Serial.println("✅ בלוטות' מופעל בהצלחה!");
    Serial.print("📱 שם המכשיר: ");
    Serial.println(device_name);
    Serial.println("⏳ ממתין לחיבור מהאפליקציה...");
    
    Serial.println("\n🥊 מערכת מוכנה לאימון!");
    Serial.println("🛡️  מערכת מתקדמת למניעת מכות כוזבות מופעלת!");
    Serial.println("📋 לוג פעילות:");
    Serial.println("================");
}

void loop() {
    // קריאת נתוני חיישנים
    readSensor(&I2C_1, &sensor1, MPU6050_ADDR1);
    delay(2);
    readSensor(&I2C_2, &sensor2, MPU6050_ADDR2);
    
    // זיהוי מכות
    detectPunch(&sensor1);
    detectPunch(&sensor2);
    detectSmartPunch();
    
    // עדכון סיכום
    total_punches = sensor1.punch_count + sensor2.punch_count;
    
    // שליחת נתונים לאפליקציה
    sendDataToBluetooth();
    
    // טיפול בפקודות מהאפליקציה
    handleBluetoothCommands();
    
    // הדפסת מצב ב-Serial כל 3 שניות
    static unsigned long last_status = 0;
    if (millis() - last_status > 3000) {
        printStatus();
        last_status = millis();
    }
    
    delay(10); // דגימה מהירה - 100Hz
}

void resetSensorData(SensorData* sensor) {
    sensor->current_punch = 0.0;
    sensor->max_punch = 0.0;
    sensor->punch_count = 0;
    sensor->baseline_x = 0.0;
    sensor->baseline_y = 0.0;
    sensor->baseline_z = 0.0;
    sensor->punch_detected = false;
    sensor->last_detection = 0;
    sensor->last_punch_time = 0;
    sensor->moving_avg_x = 0.0;
    sensor->moving_avg_y = 0.0;
    sensor->moving_avg_z = 0.0;
    sensor->stable_count = 0;
    sensor->last_recalibration = 0;
    
    // איפוס מערכת יציבות מתקדמת
    sensor->stability_index = 0;
    sensor->is_stable = false;
    sensor->current_stability_baseline_x = 0.0;
    sensor->current_stability_baseline_y = 0.0;
    sensor->current_stability_baseline_z = 0.0;
    sensor->stability_start_time = 0;
    sensor->acceleration_peak = 0.0;
    sensor->in_motion = false;
    sensor->motion_start_time = 0;
    sensor->variance_threshold = STABILITY_VARIANCE_THRESHOLD;
    sensor->recently_moved = false;
    sensor->last_significant_motion = 0;
    
    // איפוס מאגר יציבות
    for (int i = 0; i < 10; i++) {
        sensor->stability_buffer[i] = 0.0;
    }
}

void initMPU6050(TwoWire* wire, const char* name, byte addr) {
    Serial.print("📡 מאתחל ");
    Serial.print(name);
    Serial.print(" (0x");
    Serial.print(addr, HEX);
    Serial.print(")...");
    
    wire->beginTransmission(addr);
    byte error = wire->endTransmission();
    
    if (error == 0) {
        Serial.println(" זוהה!");
        
        // אתחול החיישן
        wire->beginTransmission(addr);
        wire->write(0x6B);  // PWR_MGMT_1 register
        wire->write(0);     // wake up the sensor
        wire->endTransmission(true);
        delay(100);
        
        // בדיקת WHO_AM_I
        wire->beginTransmission(addr);
        wire->write(0x75);  // WHO_AM_I register
        wire->endTransmission(false);
        wire->requestFrom(addr, 1, true);
        
        if (wire->available()) {
            byte whoami = wire->read();
            Serial.print("✓ ");
            Serial.print(name);
            Serial.print(" מחובר (ID: 0x");
            Serial.print(whoami, HEX);
            Serial.println(")");
        }
    } else {
        Serial.print(" ❌ שגיאה ");
        Serial.print(error);
        Serial.println(" - בדוק חיווט!");
    }
}

void readSensor(TwoWire* wire, SensorData* sensor, byte addr) {
    wire->beginTransmission(addr);
    wire->write(0x3B);
    byte error = wire->endTransmission(false);
    
    if (error != 0) {
        sensor->current_punch = 0.0;
        return;
    }
    
    wire->requestFrom(addr, 6, true);
    
    if (wire->available() >= 6) {
        int16_t ax = (wire->read() << 8) | wire->read();
        int16_t ay = (wire->read() << 8) | wire->read();
        int16_t az = (wire->read() << 8) | wire->read();
        
        float ax_g = ax / 16384.0;
        float ay_g = ay / 16384.0;
        float az_g = az / 16384.0;
        
        // עדכון מעקב יציבות מתקדם
        updateStabilityTracking(sensor, ax_g, ay_g, az_g);
        
        // עדכון baseline רק כשבאמת נדרש
        updateMovingBaseline(sensor, ax_g, ay_g, az_g);
        
        // חישוב ההפרש מהבסיס הנוכחי (יציב)
        float diff_x, diff_y, diff_z;
        
        if (sensor->is_stable) {
            // אם יציב - השתמש בbaseline הנוכחי היציב
            diff_x = ax_g - sensor->current_stability_baseline_x;
            diff_y = ay_g - sensor->current_stability_baseline_y;
            diff_z = az_g - sensor->current_stability_baseline_z;
        } else {
            // אם לא יציב - השתמש בממוצע הנע
            diff_x = ax_g - sensor->moving_avg_x;
            diff_y = ay_g - sensor->moving_avg_y;
            diff_z = az_g - sensor->moving_avg_z;
        }
        
        float magnitude = sqrt(diff_x*diff_x + diff_y*diff_y + diff_z*diff_z);
        
        // רק תנועות חזקות מעל הרף נחשבות כמכות
        // ובתנאי שלא במצב יציב או שיש תנועה משמעותית
        unsigned long current_time = millis();
        bool significant_motion_recently = (current_time - sensor->last_significant_motion) < SIGNIFICANT_MOTION_COOLDOWN;
        
        if (magnitude > PUNCH_THRESHOLD && (!sensor->is_stable || significant_motion_recently)) {
            sensor->current_punch = magnitude;
            sensor->in_motion = true;
            sensor->motion_start_time = current_time;
            sensor->last_significant_motion = current_time;
            
            // עדכון פיק התאוצה
            if (magnitude > sensor->acceleration_peak) {
                sensor->acceleration_peak = magnitude;
            }
        } else if (sensor->is_stable && !significant_motion_recently) {
            // במצב יציב ללא תנועה משמעותית - אפס כדי למנוע מכות כוזבות
            sensor->current_punch = 0.0;
        } else {
            sensor->current_punch = magnitude;
        }
        
        // עדכון מקסימום
        if (sensor->current_punch > sensor->max_punch) {
            sensor->max_punch = sensor->current_punch;
        }
        
        // איפוס מצב תנועה אם העוצמה ירדה
        if (magnitude < PUNCH_THRESHOLD * 0.2) {
            sensor->in_motion = false;
            sensor->acceleration_peak = 0.0;
        }
    } else {
        sensor->current_punch = 0.0;
    }
    
    delay(1);
}

// פונקציה חדשה: מעקב יציבות מתקדם
void updateStabilityTracking(SensorData* sensor, float ax, float ay, float az) {
    unsigned long current_time = millis();
    
    // חישוב magnitude כולל
    float total_magnitude = sqrt(ax*ax + ay*ay + az*az);
    
    // הוספה למאגר יציבות
    sensor->stability_buffer[sensor->stability_index] = total_magnitude;
    sensor->stability_index = (sensor->stability_index + 1) % 10;
    
    // חישוב ממוצע ושונות של המאגר
    float mean = 0;
    for (int i = 0; i < 10; i++) {
        mean += sensor->stability_buffer[i];
    }
    mean /= 10.0;
    
    float variance = calculateVariance(sensor->stability_buffer, 10, mean);
    
    // בדיקת יציבות
    bool currently_stable = (variance < sensor->variance_threshold);
    
    if (currently_stable && !sensor->is_stable) {
        // התחלת מצב יציבות חדש
        sensor->is_stable = true;
        sensor->stability_start_time = current_time;
        sensor->current_stability_baseline_x = ax;
        sensor->current_stability_baseline_y = ay;
        sensor->current_stability_baseline_z = az;
        
        Serial.print("🔒 יציבות זוהתה - baseline חדש: (");
        Serial.print(ax, 2);
        Serial.print(", ");
        Serial.print(ay, 2);
        Serial.print(", ");
        Serial.print(az, 2);
        Serial.println(")");
        
    } else if (currently_stable && sensor->is_stable) {
        // המשך מצב יציבות - עדכון עדין של הbaseline
        if ((current_time - sensor->stability_start_time) > MIN_STABILITY_TIME) {
            const float alpha = 0.01; // עדכון איטי מאוד
            sensor->current_stability_baseline_x = sensor->current_stability_baseline_x * (1 - alpha) + ax * alpha;
            sensor->current_stability_baseline_y = sensor->current_stability_baseline_y * (1 - alpha) + ay * alpha;
            sensor->current_stability_baseline_z = sensor->current_stability_baseline_z * (1 - alpha) + az * alpha;
        }
        
    } else if (!currently_stable && sensor->is_stable) {
        // יציאה ממצב יציבות
        sensor->is_stable = false;
        sensor->last_significant_motion = current_time;
        
        Serial.println("🔓 יציאה ממצב יציבות - מכות יכולות להיספר");
    }
}

// פונקציה עזר: חישוב שונות
float calculateVariance(float* buffer, int size, float mean) {
    float variance = 0;
    for (int i = 0; i < size; i++) {
        variance += pow(buffer[i] - mean, 2);
    }
    return variance / size;
}

// בדיקה האם החיישן יציב כרגע
bool isCurrentlyStable(SensorData* sensor) {
    return sensor->is_stable && 
           (millis() - sensor->stability_start_time) > MIN_STABILITY_TIME &&
           (millis() - sensor->last_significant_motion) > SIGNIFICANT_MOTION_COOLDOWN;
}

// עדכון baseline - רק כשבאמת יציב לזמן ארוך
void updateMovingBaseline(SensorData* sensor, float ax, float ay, float az) {
    // עדכון רק כשיציב מאוד ולזמן ארוך
    if (isCurrentlyStable(sensor)) {
        sensor->stable_count++;
        
        // כיול מחדש רק אחרי יציבות ארוכה מאוד (30 שניות!)
        if (sensor->stable_count > 3000) { // 30 שניות ב-100Hz
            sensor->baseline_x = sensor->current_stability_baseline_x;
            sensor->baseline_y = sensor->current_stability_baseline_y;
            sensor->baseline_z = sensor->current_stability_baseline_z;
            
            sensor->moving_avg_x = sensor->baseline_x;
            sensor->moving_avg_y = sensor->baseline_y;
            sensor->moving_avg_z = sensor->baseline_z;
            
            sensor->stable_count = 0;
            
            Serial.println("🔧 כיול אוטומטי - יציבות ארוכה מאוד (30 שניות)");
        }
    } else {
        // יש תנועה - איפוס ספירה
        sensor->stable_count = 0;
    }
}

void detectPunch(SensorData* sensor) {
    unsigned long current_time = millis();
    
    // זיהוי מכה מתקדם - רק אם לא במצב יציב או יש תנועה משמעותית
    bool can_detect_punch = !isCurrentlyStable(sensor) || 
                           (current_time - sensor->last_significant_motion) < SIGNIFICANT_MOTION_COOLDOWN;
    
    if (sensor->current_punch > PUNCH_THRESHOLD && 
        !sensor->punch_detected && 
        can_detect_punch &&
        (current_time - sensor->last_detection > SENSOR_RESET_TIME)) {
        
        sensor->punch_detected = true;
        sensor->last_detection = current_time;
    }
    
    // איפוס זיהוי מכה
    if (sensor->current_punch < PUNCH_THRESHOLD * 0.3) {
        sensor->punch_detected = false;
    }
}

void detectSmartPunch() {
    static unsigned long last_smart_detection = 0;
    unsigned long current_time = millis();
    
    // בדיקה שיש זיהוי בחיישן
    bool any_punch = sensor1.punch_detected || sensor2.punch_detected;
    
    if (any_punch && (current_time - last_smart_detection > COOLDOWN_BETWEEN_PUNCHES)) {
        // איזה חיישן הכי חזק?
        float max_force = 0;
        int winning_sensor = 0;
        String winning_zone = "";
        
        if (sensor1.current_punch > max_force && sensor1.current_punch > PUNCH_THRESHOLD) {
            max_force = sensor1.current_punch;
            winning_sensor = 1;
            winning_zone = "עליון";
        }
        
        if (sensor2.current_punch > max_force && sensor2.current_punch > PUNCH_THRESHOLD) {
            max_force = sensor2.current_punch;
            winning_sensor = 2;
            winning_zone = "תחתון";
        }
        
        // אם יש זוכה ברור
        if (winning_sensor > 0) {
            // בדיקה נוספת: האם המכה לגיטימית?
            SensorData* winning_sensor_data = (winning_sensor == 1) ? &sensor1 : &sensor2;
            bool legitimate_punch = !isCurrentlyStable(winning_sensor_data) ||
                                   (current_time - winning_sensor_data->last_significant_motion) < SIGNIFICANT_MOTION_COOLDOWN;
            
            if (legitimate_punch) {
                // רק החיישן הזוכה מקבל נקודה
                if (winning_sensor == 1) {
                    sensor1.punch_count++;
                    sensor1.last_punch_time = current_time;
                } else {
                    sensor2.punch_count++;
                    sensor2.last_punch_time = current_time;
                }
                
                // חישוב עוצמה משולבת
                float combined_force = calculateCombinedForce(winning_sensor);
                
                // חישוב BPM
                static unsigned long last_punch_time_for_bpm = 0;
                unsigned long time_between_punches = current_time - last_punch_time_for_bpm;
                float bpm = 0;
                if (last_punch_time_for_bpm > 0 && time_between_punches > 0) {
                    bpm = 60000.0 / time_between_punches;
                }
                
                // למידה אוטומטית
                if (!learning_complete) {
                    adaptToUser(combined_force);
                }
                
                last_punch_time_for_bpm = current_time;
                
                Serial.print("🥊 מכה ");
                Serial.print(winning_zone);
                Serial.print(" #");
                Serial.print((winning_sensor == 1 ? sensor1.punch_count : sensor2.punch_count));
                Serial.print(" עוצמה: ");
                Serial.print(max_force, 2);
                Serial.print(" (משולב: ");
                Serial.print(combined_force, 2);
                Serial.print(")");
                
                // הוספת מידע על מצב יציבות
                bool sensor_stable = isCurrentlyStable(winning_sensor_data);
                Serial.print(" [");
                Serial.print(sensor_stable ? "יציב" : "בתנועה");
                Serial.print("]");
                
                if (bpm > 0 && bpm < 300) {
                    Serial.print(" BPM: ");
                    Serial.print(bpm, 0);
                }
                
                if (!learning_complete) {
                    Serial.print(" [למידה ");
                    Serial.print(learning_index);
                    Serial.print("/");
                    Serial.print(LEARNING_SAMPLE_SIZE);
                    Serial.print("]");
                }
                
                Serial.print(" | סה''כ: ");
                Serial.println(sensor1.punch_count + sensor2.punch_count);
                
                // שליחה לאפליקציה
                sendPunchEventToBluetooth(winning_sensor, winning_zone, max_force, combined_force, bpm);
                
                last_smart_detection = current_time;
            } else {
                Serial.println("🚫 מכה נחסמה - חיישן במצב יציב");
            }
        }
    }
}

float calculateCombinedForce(int primary_sensor) {
    float primary_force = 0;
    float secondary_boost = 0;
    
    if (primary_sensor == 1) {
        primary_force = sensor1.current_punch;
        secondary_boost = sensor2.current_punch * 0.2;
    } else {
        primary_force = sensor2.current_punch;
        secondary_boost = sensor1.current_punch * 0.2;
    }
    
    return primary_force + secondary_boost;
}

void adaptToUser(float force) {
    if (learning_index < LEARNING_SAMPLE_SIZE) {
        learning_forces[learning_index] = force;
        learning_index++;
        
        if (learning_index >= LEARNING_SAMPLE_SIZE) {
            // חישוב ממוצע
            float avg_force = 0;
            for (int i = 0; i < LEARNING_SAMPLE_SIZE; i++) {
                avg_force += learning_forces[i];
            }
            avg_force /= LEARNING_SAMPLE_SIZE;
            
            // קביעת רף חדש
            PUNCH_THRESHOLD = avg_force * 0.7;
            if (PUNCH_THRESHOLD < 0.3) PUNCH_THRESHOLD = 0.3;
            if (PUNCH_THRESHOLD > 1.5) PUNCH_THRESHOLD = 1.5;
            
            learning_complete = true;
            
            Serial.println("\n✅ למידה הושלמה!");